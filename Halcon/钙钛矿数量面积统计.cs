//
// File generated by HDevelop for HALCON/.NET (C#) Version 22.11.1.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;
using System.Drawing;
using static System.Windows.Forms.MonthCalendar;

public partial class HDevelopExport  //黑白图计算缺陷种类和面积
{


  // Main procedure 
  public void actionArea(Bitmap Defbitmap, ref int[] hv_Areain)
  {


    // Local iconic variables 

    HObject ho_Image1, ho_Region=null, ho_ConnectedRegions=null;

    // Local control variables 

    HTuple hv_Min = new HTuple(), hv_Max = new HTuple();
    HTuple hv_Range = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Number = new HTuple(), hv_Area=new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image1);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    ho_Image1.Dispose();

        HOperatorSet.ReadImage(out ho_Image1, @"C:\Users\17597\Desktop\20240202134131.png");
        //halconProvider.Bitmap2HObjectBpp8(Defbitmap, out ho_Image1);
        hv_Min.Dispose();hv_Max.Dispose();hv_Range.Dispose();
    HOperatorSet.MinMaxGray(ho_Image1, ho_Image1, 0, out hv_Min, out hv_Max, out hv_Range);
    HTuple end_val2 = hv_Max;
    HTuple step_val2 = 1;
        //HTuple hv_Area = new HTuple[(int)hv_Max.D];
        hv_Areain = new int[(int)hv_Max.D];
        hv_Area.Dispose();
    for (hv_Index=1; hv_Index.Continue(end_val2, step_val2); hv_Index = hv_Index.TupleAdd(step_val2))
    {
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_Image1, out ho_Region, hv_Index, hv_Index);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
      hv_Number.Dispose();
      HOperatorSet.CountObj(ho_ConnectedRegions, out hv_Number);
      /*hv_Area.Dispose();*/hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_Region, out hv_Area, out hv_Row, out hv_Column);
            hv_Areain[hv_Index - 1] = (int)hv_Area.D;

    }
    ho_Image1.Dispose();
    ho_Region.Dispose();
    ho_ConnectedRegions.Dispose();

    hv_Min.Dispose();

    hv_Range.Dispose();
    hv_Index.Dispose();
    hv_Number.Dispose();
        //for (int i = 0; i < hv_Max; i++)
        //{
        //    hv_Area[i].Dispose();
        //    hv_Area[i] = null;
        //}
        //hv_Area = null;
    hv_Max.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();

  }




}


